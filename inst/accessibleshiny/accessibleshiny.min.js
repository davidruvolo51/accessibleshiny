// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"../../../node_modules/parcel/src/builtins/bundle-url.js":[function(require,module,exports) {
var bundleURL = null;

function getBundleURLCached() {
  if (!bundleURL) {
    bundleURL = getBundleURL();
  }

  return bundleURL;
}

function getBundleURL() {
  // Attempt to find the URL of the current script and use that as the base URL
  try {
    throw new Error();
  } catch (err) {
    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\/\/[^)\n]+/g);

    if (matches) {
      return getBaseURL(matches[0]);
    }
  }

  return '/';
}

function getBaseURL(url) {
  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\/\/.+)\/[^/]+$/, '$1') + '/';
}

exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
},{}],"../../../node_modules/parcel/src/builtins/css-loader.js":[function(require,module,exports) {
var bundle = require('./bundle-url');

function updateLink(link) {
  var newLink = link.cloneNode();

  newLink.onload = function () {
    link.remove();
  };

  newLink.href = link.href.split('?')[0] + '?' + Date.now();
  link.parentNode.insertBefore(newLink, link.nextSibling);
}

var cssTimeout = null;

function reloadCSS() {
  if (cssTimeout) {
    return;
  }

  cssTimeout = setTimeout(function () {
    var links = document.querySelectorAll('link[rel="stylesheet"]');

    for (var i = 0; i < links.length; i++) {
      if (bundle.getBaseURL(links[i].href) === bundle.getBundleURL()) {
        updateLink(links[i]);
      }
    }

    cssTimeout = null;
  }, 50);
}

module.exports = reloadCSS;
},{"./bundle-url":"../../../node_modules/parcel/src/builtins/bundle-url.js"}],"scss/index.scss":[function(require,module,exports) {
var reloadCSS = require('_css_loader');

module.hot.dispose(reloadCSS);
module.hot.accept(reloadCSS);
module.exports = {
  "datatable": "datatable",
  "hidden__colname": "hidden__colname",
  "row__highlighting": "row__highlighting",
  "caption__side__top": "caption__side__top",
  "caption__side__bottom": "caption__side__bottom",
  "datatable__responsive": "datatable__responsive",
  "accordion": "accordion",
  "accordion__heading": "accordion__heading",
  "accordion__toggle": "accordion__toggle",
  "toggle__label": "toggle__label",
  "toggle__icon": "toggle__icon",
  "rotated": "rotated",
  "accordion__content": "accordion__content",
  "accordion__flat": "accordion__flat",
  "accordion__focused": "accordion__focused",
  "listbox": "listbox",
  "listbox__title": "listbox__title",
  "listbox__label": "listbox__label",
  "listbox__toggle": "listbox__toggle",
  "toggle__text": "toggle__text",
  "listbox__list": "listbox__list",
  "listbox__option": "listbox__option",
  "option__text": "option__text",
  "option__icon": "option__icon",
  "hidden": "hidden"
};
},{"_css_loader":"../../../node_modules/parcel/src/builtins/css-loader.js"}],"js/_setDocMeta.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

////////////////////////////////////////////////////////////////////////////////
// FILE: _setDocMeta.js
// AUTHOR: David Ruvolo
// CREATED: 2020-07-09
// MODIFIED: 2020-09-09
// PURPOSE: set document meta content that cannot be done using shiny tags
// DEPENDENCIES: NA
// STATUS: working
// COMMENTS: when imported and attached to DOMContentLoaded, make sure <span>
// is rendered.
////////////////////////////////////////////////////////////////////////////////
// define function
function setDocMeta() {
  var targetElem = document.getElementsByTagName("html")[0];
  var refElem = document.getElementById("accessible-shiny-meta");
  targetElem.lang = refElem.getAttribute("data-html-lang");
  targetElem.dir = refElem.getAttribute("data-html-dir");
} // export


var _default = setDocMeta;
exports.default = _default;
},{}],"js/_accordion.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
////////////////////////////////////////////////////////////////////////////////
// FILE: _accordion.js
// AUTHOR: David Ruvolo
// CREATED: 2020-07-08
// MODIFIED: 2020-09-09
// PURPOSE: accordion button input binding
// DEPENDENCIES: Shiny assets
// STATUS: in.progress
// COMMENTS: This input binding toggles all instances of the accordion
// component. This script will create a new constructor that extends the
// Shiny.InputBinding() and adjust the state of the component when the
// toggle is clicked. ARIA attributes will also be adjusted. Return current
// state for use in the server (if needed by the user).
////////////////////////////////////////////////////////////////////////////////
// create new binding
var Accordion = new Shiny.InputBinding();
$.extend(Accordion, {
  // find: locate component within scope
  find: function find(scope) {
    return $(scope).find(".accordion");
  },
  // initialize: return state if needed in the server (i.e., isOpen)
  initialize: function initialize(el) {
    return $(el).find("button.accordion__toggle").attr("aria-expanded") === true;
  },
  // getValue: return state if needed (i.e., isOpen)
  getValue: function getValue(el) {
    return $(el).find("button.accordion__toggle").attr("aria-expanded") === true;
  },
  // subscribe: create an register DOM events
  subscribe: function subscribe(el, callback) {
    // define function that handles state
    function toggleAccordion() {
      // find elements
      var btn = $(el).find(".accordion__toggle");
      var icon = $(el).find(".toggle__icon");
      var section = $(el).find(".accordion__content"); // toggle: component state + ARIA attributes

      if (btn.attr("aria-expanded") === "false") {
        btn.attr("aria-expanded", "true");
        section.removeAttr("hidden");
        icon.addClass("rotated");
      } else {
        btn.attr("aria-expanded", "false");
        section.attr("hidden", "");
        icon.removeClass("rotated");
      } // return state (if needed in the server)


      callback();
    } // onClick


    $(el).on("click", "button.accordion__toggle", function (e) {
      toggleAccordion();
    });
  },
  // receiveMessage: triggered by server-side functions
  receiveMessage: function receiveMessage(el, message) {
    // reset accordion to it's default closed state
    if (message === "reset") {
      $(el).find(".accordion__toggle").attr("aria-expanded", "false");
      $(el).find(".accordion__content").attr("hidden", "");
      $(el).find(".toggle__icon").removeClass("rotated");
    }
  },
  // unsubscribe: clean up
  unsubscribe: function unsubscribe(el) {
    $(el).off(".Accordion");
  }
}); // export

var _default = Accordion;
exports.default = _default;
},{}],"js/_listbox.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
////////////////////////////////////////////////////////////////////////////////
// FILE: listbox.js
// AUTHOR: David Ruvolo
// CREATED: 2020-06-29
// MODIFIED: 2020-09-17
// PURPOSE: listbox input binding
// DEPENDENCIES: Shiny
// STATUS: working
// COMMENTS: Originally developed for shinyAppTutorials/shiny-listbox
////////////////////////////////////////////////////////////////////////////////
// BEGIN
// init binding
var listbox = new Shiny.InputBinding(); // define new input binding

$.extend(listbox, {
  // set element to find 
  find: function find(scope) {
    return $(scope).find(".listbox");
  },
  // on input initialize, select the first option
  initialize: function initialize(el) {
    // select list (ul) and first item in the list (li)
    var list = $(el).find("ul[role='listbox']");
    var first = $(el).find("li[role='option']").first(); // update ARIA attributes

    list.attr("aria-activedescendant", first.attr("id"));
    first.attr("aria-selected", "true"); // add the value of the first item to the parent container (i.e., <fieldset>)
    // to a custom data attribute

    $(el).attr("data-value", first.attr("id")); // update displayed text

    $(el).find(".toggle__text").text(first.attr("data-option"));
  },
  // when callback is triggered, get the value of the element
  // with the attribute `aria-selected`
  getValue: function getValue(el) {
    return $(el).find("li[aria-selected='true']").attr("data-value");
  },
  // subscribe: define all events here
  subscribe: function subscribe(el, callback) {
    // define function that closes menu
    function closeMenu() {
      // find elements that will be modified on close
      var menu = $(el).find("ul[role='listbox']");
      var toggle = $(el).find("button.listbox__toggle"); // modify attributes

      menu.addClass("hidden");
      toggle.attr("aria-expanded", "false");
      toggle.find(".toggle__icon").removeClass("rotated");
    } // define function that opens menu


    function openMenu() {
      // find elements that will be modified on open
      var menu = $(el).find("ul[role='listbox']");
      var toggle = $(el).find("button.listbox__toggle"); // modify attributes

      menu.removeClass("hidden");
      toggle.attr("aria-expanded", "false");
      toggle.find(".toggle__icon").addClass("rotated"); // focus menu and scroll to selected element

      menu.focus();
    } // define function that toggles menu state


    function toggleMenu() {
      var menu = $(el).find("ul[role='listbox']");

      if (menu.hasClass("hidden")) {
        openMenu();
      } else {
        closeMenu();
      }
    } // update component and selected item


    function updateInput(elem) {
      // focus new element
      var newElem = elem;
      newElem.attr("aria-selected", "true");
      newElem.addClass("focus"); // update menu attribute

      var menu = $(el).find("ul[role='listbox']");
      menu.attr("aria-activedescendant", elem.attr("id")); // update component value + display text

      $(el).attr("data-value", elem.attr("data-value"));
      $(el).find(".toggle__text").text(elem.attr("data-option")); // run callback (i.e., getValue)

      callback();
    } // event: when menu toggle is clicked


    $(el).on("click", "button.listbox__toggle", function (e) {
      toggleMenu();
    }); // event: watch for keydowns

    $(el).on("keydown", "ul[role='listbox']", function (e) {
      switch (e.keyCode) {
        // on keydown: ArrowUp - code 38
        case 38:
          var current = $(el).find("li[aria-selected='true']");

          if (current.prev().length) {
            var newElem = current.prev();
            current.removeAttr("aria-selected");
            updateInput(newElem);
          }

          break;
        // on keydown: ArrowDown - code 40

        case 40:
          var current = $(el).find("li[aria-selected='true']");

          if (current.next().length) {
            var newElem = current.next();
            current.removeAttr("aria-selected");
            updateInput(newElem);
          }

          break;
        // on keydown: Home - code 36

        case 36:
          var current = $(el).find("li[aria-selected='true']");
          var first = $(el).find("li[role='option']").first();
          current.removeAttr("aria-selected");
          updateInput(first);
          break;
        // on keydown: End - code 35

        case 35:
          var current = $(el).find("li[aria-selected='true']");
          var last = $(el).find("li[role='option']").last();
          current.removeAttr("aria-selected");
          updateInput(last);
          break;
        // on keydown: Escape - code 27

        case 27:
          closeMenu();
          break;
        // on keydown: Enter - code 13

        case 13:
          var selected = $(e.target);
          updateInput(selected);
          closeMenu();
          break;
      }
    }); // on event: when option clicked

    $(el).on("click", "li[role='option']", function (e) {
      // make sure the <li> element is selected
      // this will handle situations when <span> or <icon> is
      // clicked
      $(el).find("li[role='option'][aria-selected='true']").removeAttr("aria-selected");
      var elem = $(e.target).closest("li[role='option']");
      updateInput(elem);
      closeMenu();
    });
  },
  // receiveMessage
  receiveMessage: function receiveMessage(el, message) {
    if (message.type === "reset") {
      // select first option if unnamed
      if (message.option === "") {
        this.initialize(el);
      }

      if (message.option !== "") {
        console.log("message");
      }
    }
  },
  // unsubscribe
  unsubscribe: function unsubscribe(el) {
    $(el).off(".listbox");
  }
}); // export

var _default = listbox;
exports.default = _default;
},{}],"index.js":[function(require,module,exports) {
"use strict";

require("./scss/index.scss");

var _setDocMeta = _interopRequireDefault(require("./js/_setDocMeta"));

var _accordion = _interopRequireDefault(require("./js/_accordion"));

var _listbox = _interopRequireDefault(require("./js/_listbox"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

////////////////////////////////////////////////////////////////////////////////
// FILE: index.js
// AUTHOR: David Ruvolo
// CREATED: 2020-07-08
// MODIFIED: 2020-09-17
// PURPOSE: parcel entry
// DEPENDENCIES: NA
// STATUS: in.progress
// COMMENTS: load scss, modules, etc.
////////////////////////////////////////////////////////////////////////////////
// import scss
// import modules
////////////////////////////////////////
// functions to run on DOMLOADED
window.addEventListener("DOMContentLoaded", function (e) {
  var refElem = document.getElementById("accessible__shiny__meta");

  if (refElem) {
    (0, _setDocMeta.default)();
  }

  if (!refElem) {
    console.error("accessibleshiny: meta element does not exist");
  }
}, {
  once: true
}); // register bindings

Shiny.inputBindings.register(_accordion.default);
Shiny.inputBindings.register(_listbox.default);
},{"./scss/index.scss":"scss/index.scss","./js/_setDocMeta":"js/_setDocMeta.js","./js/_accordion":"js/_accordion.js","./js/_listbox":"js/_listbox.js"}],"../../../node_modules/parcel/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "51100" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["../../../node_modules/parcel/src/builtins/hmr-runtime.js","index.js"], null)