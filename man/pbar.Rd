% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/progressbar.R
\name{pbar}
\alias{pbar}
\title{R6 Class for progress bar}
\description{
R6 Class for progress bar
}
\examples{

## ------------------------------------------------
## Method `pbar$new`
## ------------------------------------------------

mybar <- progress(start = 0, min = 0, max = 10)


## ------------------------------------------------
## Method `pbar$bar`
## ------------------------------------------------

```{r}
library(shiny)

mybar <- accessibleshiny::progressbar(max = 10)

ui <- tagList(
    accessibleshiny::use_accessibleshiny(),
    tags$main(
        style = "display: block; height: 50vh; margin-top: 50px",
        actionButton("increaseBar", "Next"),
        actionButton("descreaseBar", "Previous")
    ),
    mybar$bar(
        id = "bar1",
        fixed = TRUE
    )
)

server <- function(input, output) {
    mybar$listen()

    observeEvent(input$increaseBar, {
        mybar$increase()
    })

    observeEvent(input$descreaseBar, {
        mybar$decrease()
    })
}

shinyApp(ui, server)
```

## ------------------------------------------------
## Method `pbar$increase`
## ------------------------------------------------


```{r}
library(shiny)

mybar <- accessibleshiny::progressbar(max = 10)

ui <- tagList(
    accessibleshiny::use_accessibleshiny(),
    tags$main(
        style = "display: block; height: 50vh; margin-top: 50px",
        actionButton("increaseBar", "Next")
    ),
    mybar$bar(
        inputId = "bar1",
        fixed = TRUE
    )
)

server <- function(input, output) {
    mybar$listen()

    observeEvent(input$increaseBar, {
        mybar$increase()
    })
}

shinyApp(ui, server)
```

## ------------------------------------------------
## Method `pbar$decrease`
## ------------------------------------------------

```{r}
library(shiny)

mybar <- accessibleshiny::progressbar(max = 10)

ui <- tagList(
    accessibleshiny::use_accessibleshiny(),
    tags$main(
        style = "display: block; height: 50vh; margin-top: 50px",
        actionButton("descreaseBar", "Previous")
    ),
    mybar$bar(
        inputId = "bar1",
        fixed = TRUE
    )
)

server <- function(input, output) {
    mybar$listen()

    observeEvent(input$descreaseBar, {
        mybar$decrease()
    })
}

shinyApp(ui, server)
```

## ------------------------------------------------
## Method `pbar$reset`
## ------------------------------------------------

```{r}
library(shiny)

mybar <- accessibleshiny::progressbar(max = 10)

ui <- tagList(
    accessibleshiny::use_accessibleshiny(),
    tags$main(
        style = "display: block; height: 50vh; margin-top: 50px",
        actionButton("increaseBar", "Next"),
        actionButton("resetBar", "Reset")
    ),
    mybar$bar(
        inputId = "bar1",
        fixed = TRUE
    )
)

server <- function(input, output) {
    mybar$listen()

    observeEvent(input$increaseBar, {
        mybar$increase()
    })

    observeEvent(input$resetBar, {
        mybar$reset()
    })
}

shinyApp(ui, server)
```
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{elem}}{ID of the progress bar defined by \code{bar()}}

\item{\code{start}}{the starting position for the progress bar}

\item{\code{current}}{the current state of the progress bar}

\item{\code{min}}{the minimum value of the progress bar}

\item{\code{max}}{The maximum value of the progress bar}

\item{\code{text}}{text formula that updates the \code{aria-valuetext}}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{pbar$new()}}
\item \href{#method-bar}{\code{pbar$bar()}}
\item \href{#method-increase}{\code{pbar$increase()}}
\item \href{#method-decrease}{\code{pbar$decrease()}}
\item \href{#method-reset}{\code{pbar$reset()}}
\item \href{#method-clone}{\code{pbar$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new progress bar
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pbar$new(start = 0, min = 0, max = 7)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{start}}{the starting progress}

\item{\code{min}}{the minimum value of the progress bar}

\item{\code{max}}{the maximum value of the progress bar}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Create a new progress bar
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{mybar <- progress(start = 0, min = 0, max = 10)

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-bar"></a>}}
\if{latex}{\out{\hypertarget{method-bar}{}}}
\subsection{Method \code{bar()}}{
bar

Create a new progress bar in the shiny UI
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pbar$bar(
  inputId,
  fill = NULL,
  fixed = FALSE,
  position = "top",
  yOffset = NULL,
  text = "{value} of {max}",
  classnames = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{inputId}}{a unique identifier for the progress bar}

\item{\code{fill}}{color used to style the progress bar}

\item{\code{fixed}}{If \code{TRUE}, the progress bar will be fixed to the
top or bottom of the parent element}

\item{\code{position}}{If \code{fixed = TRUE}, then the argument position
can be used to fix the progress bar to the "top" or "bottom" of
the parent element.}

\item{\code{yOffset}}{A CSS value used to adjust the y position of the
progress bar relative to the parent element}

\item{\code{text}}{formula for updating the aria text}

\item{\code{classnames}}{string containing one or more css classes}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{```{r}
library(shiny)

mybar <- accessibleshiny::progressbar(max = 10)

ui <- tagList(
    accessibleshiny::use_accessibleshiny(),
    tags$main(
        style = "display: block; height: 50vh; margin-top: 50px",
        actionButton("increaseBar", "Next"),
        actionButton("descreaseBar", "Previous")
    ),
    mybar$bar(
        id = "bar1",
        fixed = TRUE
    )
)

server <- function(input, output) {
    mybar$listen()

    observeEvent(input$increaseBar, {
        mybar$increase()
    })

    observeEvent(input$descreaseBar, {
        mybar$decrease()
    })
}

shinyApp(ui, server)
```
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-increase"></a>}}
\if{latex}{\out{\hypertarget{method-increase}{}}}
\subsection{Method \code{increase()}}{
increase

Increase the progress bar by 1 another number
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pbar$increase(by = 1)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{by}}{a number between the min and max values (default = 1)}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{
```{r}
library(shiny)

mybar <- accessibleshiny::progressbar(max = 10)

ui <- tagList(
    accessibleshiny::use_accessibleshiny(),
    tags$main(
        style = "display: block; height: 50vh; margin-top: 50px",
        actionButton("increaseBar", "Next")
    ),
    mybar$bar(
        inputId = "bar1",
        fixed = TRUE
    )
)

server <- function(input, output) {
    mybar$listen()

    observeEvent(input$increaseBar, {
        mybar$increase()
    })
}

shinyApp(ui, server)
```
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-decrease"></a>}}
\if{latex}{\out{\hypertarget{method-decrease}{}}}
\subsection{Method \code{decrease()}}{
decrease

Decrease the progress bar by 1 another number
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pbar$decrease(by = 1)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{by}}{A number between min and max values (default = 1)}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{```{r}
library(shiny)

mybar <- accessibleshiny::progressbar(max = 10)

ui <- tagList(
    accessibleshiny::use_accessibleshiny(),
    tags$main(
        style = "display: block; height: 50vh; margin-top: 50px",
        actionButton("descreaseBar", "Previous")
    ),
    mybar$bar(
        inputId = "bar1",
        fixed = TRUE
    )
)

server <- function(input, output) {
    mybar$listen()

    observeEvent(input$descreaseBar, {
        mybar$decrease()
    })
}

shinyApp(ui, server)
```
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-reset"></a>}}
\if{latex}{\out{\hypertarget{method-reset}{}}}
\subsection{Method \code{reset()}}{
reset

resets progress bar to its initial state
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pbar$reset()}\if{html}{\out{</div>}}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{```{r}
library(shiny)

mybar <- accessibleshiny::progressbar(max = 10)

ui <- tagList(
    accessibleshiny::use_accessibleshiny(),
    tags$main(
        style = "display: block; height: 50vh; margin-top: 50px",
        actionButton("increaseBar", "Next"),
        actionButton("resetBar", "Reset")
    ),
    mybar$bar(
        inputId = "bar1",
        fixed = TRUE
    )
)

server <- function(input, output) {
    mybar$listen()

    observeEvent(input$increaseBar, {
        mybar$increase()
    })

    observeEvent(input$resetBar, {
        mybar$reset()
    })
}

shinyApp(ui, server)
```
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{pbar$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
