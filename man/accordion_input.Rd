% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/accordion_input.R
\name{accordion_input}
\alias{accordion_input}
\title{\code{accordion_input}}
\usage{
accordion_input(
  inputId,
  title,
  content,
  checked = FALSE,
  class = "accordion__style__a"
)
}
\arguments{
\item{inputId}{a unique ID for the accordion component}

\item{title}{a text string containing a title for the collapsible section}

\item{content}{an html element or a list of html elements}

\item{checked}{a logical argument that indicates if the item should be
selected by default (default: FALSE)}

\item{class}{a string containing css classes. Using this argument, you can
pass your own class names or use one of the classes made available by
this package: "accordion__style__a" (styling used in the app). Use
\code{class = NULL}, to return a minimally styled component.}
}
\value{
Create an accordion component that is also a checkbox input
}
\description{
Create an accordion input element for use in shiny apps. This function
function a component that expands and collapses user defined content. The
component is designed to be selectable i.e., accessible in the shiny
server via \verb{input$*}. If you would display content that is collapsible,
use the \code{accordion} component.
}
\details{
This component is useful for creating checkbox groups that have further
descriptions or other information than may be useful for the user in regards
to which element should be selection.
}
\examples{
if (interactive()) {
  library(shiny)
  ui <- tagList(
    iceComponents::use_iceComponents(),
    tags$head(
      tags$style(
        "#what-is-shiny {
           width: 400px;
        }"
      )
    ),
    tags$main(
      id = "main",
      class = "main",
      tags$h2("Is Shiny your favorite R technology?"),
      iceComponents::accordion_input(
        inputId = "what-is-shiny",
        title = "Shiny",
        checked = TRUE,
        content = tagList(
          tags$p(
            "Shiny is an R package that makes it easy to build",
            "interactive web apps straight from R. You can host",
            "standalone apps on a webpage or embed them in R Markdown",
            "documents or build dashboards. You can also extend your",
            "Shiny apps with CSS themes, htmlwidgets, and JavaScript",
            "actions."
          ),
          tags$cite("Rstudio.org")
        )
      ),
      tags$button(
        id = "reset",
        class = "shiny-bound-input action-button",
        "Reset Accordion"
      ),
      tags$button(
        id = "clear",
        class = "shiny-bound-input action-button",
        "Clear Accordion"
      )
    )
  )
  server <- function(input, output) {
    observeEvent(input$reset, {
      iceComponents::reset_accordion_input(inputId = "what-is-shiny")
    })
    observeEvent(input$clear, {
      iceComponents::clear_accordion_input(inputId = "what-is-shiny")
    })
  }
  shinyApp(ui, server)
}

}
